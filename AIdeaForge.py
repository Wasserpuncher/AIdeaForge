import os
import openai
from github import Github
from textblob import TextBlob
import matplotlib.pyplot as plt
from wordcloud import WordCloud
import requests

class AIdeaForge:
    def __init__(self, openai_key=None, github_token=None):
        self.openai = openai
        self.openai.api_key = openai_key or os.getenv('OPENAI_API_KEY')
        if not self.openai.api_key:
            raise ValueError("OpenAI API key is required")
        
        self.github = Github(github_token or os.getenv('GITHUB_TOKEN'))
        if not github_token and not os.getenv('GITHUB_TOKEN'):
            raise ValueError("GitHub token is required")

    def generate_idea(self, domain):
        try:
            response = self.openai.Completion.create(
                engine="text-davinci-002",
                prompt=f"Generate an innovative software idea in the domain of {domain}",
                max_tokens=100
            )
            return response.choices[0].text.strip()
        except openai.error.OpenAIError as e:
            print(f"An error occurred while generating idea: {e}")
            return None

    def analyze_github_trends(self, keyword):
        try:
            repos = self.github.search_repositories(query=f'language:python {keyword}')
            trends = [repo.description for repo in repos[:10] if repo.description]
            return ' '.join(trends)
        except Exception as e:
            print(f"An error occurred while analyzing GitHub trends: {e}")
            return ""

    def sentiment_analysis(self, text):
        try:
            blob = TextBlob(text)
            return blob.sentiment.polarity
        except Exception as e:
            print(f"An error occurred during sentiment analysis: {e}")
            return 0

    def generate_wordcloud(self, text):
        try:
            wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)
            plt.figure(figsize=(10, 5))
            plt.imshow(wordcloud, interpolation='bilinear')
            plt.axis('off')
            plt.title('Trend Analysis Wordcloud')
            plt.show()
        except Exception as e:
            print(f"An error occurred while generating wordcloud: {e}")

    def kickstart_project(self, idea):
        try:
            repo_name = idea.replace(" ", "-")[:100]  # GitHub has a 100 character limit for repo names
            readme = f"# {idea}\n\nThis project was generated by AIdeaForge."
            repo = self.github.get_user().create_repo(repo_name, description=idea, auto_init=True)
            repo.create_file("README.md", "Initial commit", readme)
            return repo.html_url
        except Exception as e:
            print(f"An error occurred while creating the project: {e}")
            return None

def check_internet_connection():
    try:
        requests.get("http://www.github.com", timeout=5)
        return True
    except requests.ConnectionError:
        return False

if __name__ == "__main__":
    if not check_internet_connection():
        print("No internet connection. Please check your connection and try again.")
        exit()

    openai_key = os.getenv('OPENAI_API_KEY')
    github_token = os.getenv('GITHUB_TOKEN')

    if not openai_key:
        openai_key = input("Enter your OpenAI API key: ")
    if not github_token:
        github_token = input("Enter your GitHub token: ")

    try:
        forge = AIdeaForge(openai_key, github_token)
        
        domain = input("Enter a domain for idea generation: ")
        idea = forge.generate_idea(domain)
        if idea:
            print(f"Generated Idea: {idea}")
        
            trends = forge.analyze_github_trends(domain)
            sentiment = forge.sentiment_analysis(trends)
            print(f"Current trend sentiment: {sentiment}")
        
            if trends:
                forge.generate_wordcloud(trends)
        
            if input("Do you want to kickstart this project on GitHub? (y/n): ").lower() == 'y':
                repo_url = forge.kickstart_project(idea)
                if repo_url:
                    print(f"Project created at: {repo_url}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
